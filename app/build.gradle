import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.aspectj:aspectjtools:1.8.1'
        classpath 'com.itextpdf:itextg:5.5.10'
    }
}

apply plugin: 'com.android.application'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':perfmon')
    compile 'org.aspectj:aspectjrt:1.8.1'
}

android {
    signingConfigs {
        config {
            keyAlias 'hf-androidclient'
            keyPassword 'pass@word1'
            storeFile file('C:/Users/John/keystores/hf-androidclient.jks')
            storePassword 'pass@word1'
        }
    }
    compileSdkVersion 26
    buildToolsVersion "26.0.2"
    defaultConfig {
        applicationId "org.coreocto.dev.hf.androidclient"
        minSdkVersion 19
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
//        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
        debug {
            signingConfig signingConfigs.config
            ext.enableCrashlytics = false
        }
    }
    dexOptions {
        jumboMode true
    }
    packagingOptions {
        exclude 'META-INF/NOTICE.txt' // will not include NOTICE file
        exclude 'META-INF/LICENSE.txt' // will not include LICENSE file
    }
}

//configurations.all {
//    resolutionStrategy {
//        force 'com.google.code.findbugs:jsr305:1.3.9'
//        //this is a workaround for the Guava library, otherwise it wouldn't compile
//    }
//}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'commons-lang:commons-lang:2.6'
    compile 'com.android.support:appcompat-v7:26.1.0'
    compile 'com.android.support:design:26.1.0'
    compile 'com.android.support:support-v4:26.1.0'
    compile 'com.google.code.gson:gson:2.8.1'
    compile 'com.github.machinarius:preferencefragment:0.1.1'
    compile 'com.squareup.okhttp3:okhttp:3.4.1'
    compile 'com.google.android.gms:play-services-auth:11.8.0'
    compile 'com.google.android.gms:play-services-drive:11.8.0'
    compile 'com.github.coreocto:HF-ClientLib:5fcc798'
    compile 'com.itextpdf:itextg:5.5.10'
    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    testCompile 'junit:junit:4.12'

//    compile 'com.android.support:multidex:1.0.1'

    // compile group: 'org.textmining', name: 'tm-extractors', version: '0.4'
    // DO NOT include tm-extractors here, it adds an additional dependency poi 2.5.1 which causes duplicate class error
    // Workaround: download the jar and put it into libs directory
}

final def log = project.logger
final def variants = project.android.applicationVariants

variants.all { variant ->
    if (!variant.buildType.isDebuggable()) {
        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
        return;
    }

    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        String[] args = ["-showWeaveInfo",
                         "-1.5",
                         "-inpath", javaCompile.destinationDir.toString(),
                         "-aspectpath", javaCompile.classpath.asPath,
                         "-d", javaCompile.destinationDir.toString(),
                         "-classpath", javaCompile.classpath.asPath,
                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
        log.debug "ajc args: " + Arrays.toString(args)

        MessageHandler handler = new MessageHandler(true);
        new Main().run(args, handler);
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break;
                case IMessage.WARNING:
                    log.warn message.message, message.thrown
                    break;
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break;
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break;
            }
        }
    }
}

apply plugin: 'com.google.gms.google-services'